#!/usr/bin/env bash
#
# MIT License
#
# Copyright (c) 2022 Marc Khouzam  <marc.khouzam@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# COLOR codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m'

compDir="$HOME/.kubectl_plugin_completion"

help() {
	if [[ $# -eq 0 ]]; then
	    echo "Kubectl plugin to enable shell completion for your installed plugins."
		echo "If an installed plugin does not yet provide its own support for shell completion"
		echo "this plugin will attempt to partially enable it."
	    echo
    	echo "Available commands:"
		echo "  setup		Setup partial shell completions for your installed plugins that are supported"
		echo "  list		List the plugins for which partial shell completion was setup by this plugin"
		echo "  clean		Remove all shell completions that were setup by this plugin"
		echo "  supported	List the installed plugins for which shell completion can be setup"
		echo
    	echo "Flags:"
		echo "  -h, --help         help for the plugin"
	elif [[ $# -eq 1 ]]; then
		case "$1" in
			setup)
				echo "Setup partial shell completions for your installed plugins that are supported."
				echo
    			echo "Flags:"
				echo "  -h, --help	help for the plugin"
				;;
			clean)
				echo "Remove all shell completions that were setup by this plugin."
				echo
    			echo "Flags:"
				echo "  -h, --help	help for the plugin"
		  		;;
			list)
				echo "List the plugins for which partial shell completion was setup by this plugin."
				echo
    			echo "Flags:"
				echo "  -h, --help	help for the plugin"
				;;
			supported)
				echo "List the installed plugins for which shell completion can be setup."
				echo
    			echo "Flags:"
				echo "  -h, --help	help for the plugin"
				;;
			*)
				help
				;;
		esac
	else
		help
	fi
}

mkdir -p "$compDir"

# This function is the basic functionality.  It will setup shell completion
# for any supported plugins that does not have it setup already.
setup() {
	for plugin in $(kubectl plugin list --name-only 2> /dev/null | grep kubectl); do
		pluginName=${plugin#kubectl-}
		compFile="kubectl_complete-${pluginName}"
		if ! which $compFile > /dev/null 2>&1; then
			# Check if $plugin contains the string ValidArgsFunction which
			# is a way to know it uses Cobra.
			if $(grep ValidArgsFunction -q $(which $plugin));then
				pluginDir=$(dirname $(which $plugin))
				cat << EOF > "$compDir/$compFile"
#!/bin/sh
kubectl $pluginName __complete "\$@"
EOF
				chmod +x "$compDir/$compFile"
				ln -s "$compDir/$compFile" $pluginDir/$compFile
				echo -e "${GREEN}Shell completion for plugin '$pluginName' has been setup.${NC}"
			else
				echo -e "${YELLOW}Shell completion for plugin '$pluginName' is not supported.${NC}"
			fi
		else
			if ls "$compDir/$compFile" > /dev/null 2>&1 ; then
				echo "Shell completion for plugin '$pluginName' was already setup."
			else
				echo "Shell completion for plugin '$pluginName' is already supported."
			fi
		fi
	done
}

clean() {
	echo "About to remove the temporary shell completion this plugin had setup."
	for f in $(ls $compDir/kubectl_complete-* 2> /dev/null); do
		plugin="${f#$compDir/kubectl_complete-}"
		echo "Removing setup for plugin '$plugin'"			
		rm -f $(which "kubectl_complete-$plugin")
	done
	rm -f $compDir/kubectl_complete-*
	rmdir $compDir
}

list() {
	echo "This plugin has partially setup shell completion for the following plugins:"
	echo
	for f in $(ls $compDir/kubectl_complete-* 2> /dev/null); do
		if ls -l $f | grep plugin_completion -q; then
			echo "${f#$compDir/kubectl_complete-}"
		fi
	done
}

supported() {
	allPlugins=$(kubectl plugin list --name-only 2> /dev/null | grep kubectl)
	echo "The installed plugins for which shell completion can be partially enabled are:"
	echo
	for plugin in $allPlugins; do
		if $(grep ValidArgsFunction -q $(which "$plugin"));then
			echo ${plugin#kubectl-}
		fi
	done
}

complete() {
	if [ $# -eq 1 ]; then
	    if [[ "$1" == "-"* ]]; then
			echo "-h"
			echo "--help"
	    elif [[ "$1" == "--"* ]]; then
			echo "--help"
		else
			tab=$(printf '\t')
			echo "setup${tab}Setup partial shell completions for your installed plugins that are supported"
			echo "list${tab}List the plugins for which shell completion was setup by this plugin"
			echo "clean${tab}Remove all shell completions that were setup by this plugin"
			echo "supported${tab}List the installed plugins for which partial shell completion can be setup"
		fi
	elif [ $# -eq 2 ] && [[ "$1" != "-"* ]]; then 
		if [[ "$2" == "-"* ]]; then
			echo "-h"
			echo "--help"
	    elif [[ "$2" == "--"* ]]; then
			echo "--help"
		fi
	fi
	echo ":4" # No file completion
}

# Check if we are being asked for completion choices through a __complete command
# We do this directly in the plugin to allow the plugin to act on itself and install
# its own shell completion.
if [ $# -gt 1 ] && [ $1 = __complete ]; then
	shift
	set -x
	complete "$@"
	exit 0
fi

if [ $# -eq 0 ]; then
	help
	exit 1
elif [ $# -gt 1 ]; then
	if [ "$1" = "help" ] || [ "${@: -1}" = "-h" ] || [ "${@: -1}" = "--help" ]; then
		help $2
		exit 0
	fi
	help $1
	exit 1
else   # one argument
	# Check for help first
    if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
		help
		exit 0
    fi

	case $1 in
		setup)
			setup
			;;
		clean)
			clean
			;;
		list)
			list
			;;
		supported)
			supported
			;;
		*)
			# Unknown argument
			help
			exit 1
	esac
fi
